// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  username   String    @unique
  name       String
  bio        String?   @db.Text
  email      String?   @unique
  avatar_url String?
  created_at DateTime  @default(now())
  accounts   Account[]
  sessions   Session[]
  Post       Post[]
  Comment    Comment[]

  @@map("users")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([user_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Location {
  id    String @id @default(uuid())
  city  String @unique
  state String @unique

  @@map("locations")
}

model Post {
  id       String  @id @default(uuid())
  content  String
  subtitle String?
  userId   String

  user User @relation(fields: [userId], references: [id])

  @@map("posts")
}

model Comment {
  id      String @id @default(uuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@map("comments")
}
